1.作用域与作用域链 
 执行环境（又称环境）是JavaScript中最为重要的一个概念。执行环境定义了变量或者函数有权访问的其他数据，决定了它们各自的行为。每个执行环境都有一个与之
 关联的变量对象（variable object），环境中定义的所有的变量和函数都保存在这个对象中。 虽然我们编写的代码无法访问这个对象，但解析器在处理数据时会在
 后台使用它。
 
 全局执行环境是最外围的一个执行环境。根据ECMA实现所在的宿主环境不同，表示执行环境的对象也不一样。在Web浏览器中，全局执行环境被认为是window对象，
 因此所有全局变量和函数都是作为window对象的属性和方法创建的。某个执行环境中的所有代码执行完毕后，该环境被销毁，保存在其中的所有变量和函数定义也随
 之销毁（变量和函数是动态的，会被销毁；而对象的属性和方法是静态的，在对象不被销毁之前属性和方法不会被销毁）。
每个函数都有自己的执行环境。当执行流进入一个函数时，函数的（执行）环境就会推入一个环境栈中。而在函数执行之后，栈将其环境弹出，把控制权返回给之前的执
行的环境。

当代码在一个环境中执行时，会创建变量对象的一个作用域链（scope chain）。作用域链的用途，是保证对执行环境有权访问的所有变量和函数的有序访问。作用
域链的前端，始终都是当前执行的代码所在环境的变量对象。如果这个环境是函数，则将其活动对象（activation）作为变量对象。活动对象在最开始时只包含一个
变量，即arguments对象（全局环境中不存在）。作用域链中的下一个变量对象来自包含的环境，而再下一个变量对象则来着下一个包含环境。这样，一直延续到全局
执行环境；全局执行环境中的变量对象始终都是作用域链中的最后一个对象。

标识符解析是沿着作用域链一级一级地搜索标识符的过程。搜索过程始终从作用域链的前端开始，然后逐级地向后回溯，直至找到标识符符为止（找不到时通常会发生错误）。


2.延长作用域链:

虽然执行环境的类型总共只有两种：全局和局部（函数），但还是有其他办法来延长作用域链。这是因为有些语句可以在作用域链的前端临时增加一个变量对象，该变量对
象会在代码执行后被移除。具体来说，就是当执行流进入下列任何一个语句时，作用域链就会得到加长：
   try-catch 语句的carch块；
   with 语句。
   这两个语句都会在作用域链的前端添加一个变量对象。对with语句来说，其变量对象中包含着为指定对象的所有属性和方法所做的变量声明。对catch语句来说，其
   变量对象中包含的是被抛出的粗无对象的声明。这些变量对象都是只读的，因此在with和catch语句中声明的变量都会被添加到所在直线环境的变量对象中。如下例
   子：

  function buildUrl () {
      var qs = "?debug=true";
      with (location) {
         var url = href +qs ;
      }
      return url ;
  }
  var result = buildUrl () ;
  alert (result) ;

  在此，with语句接收的是location对象，因此其变量对象中就包含location对象的所有属性和方法。而这个变量对象被添加到了作用域链的前端。
  buildUrl()函数中定义了一个变量qs，当在with语句中引用变量href时（实际引用的是location.href),可以在当前执行环境的变量对象中找到。
  当引用变量qs时，引用的则是在buildUrl()中定义的那个变量，而该变量位于函数环境变量对象中。至于with语句内部，则定义了一个名为url的变量。
  由于with语句的变量对象是只读的，结果url就成了函数执行环境的一部分，因而可以作为函数的值被返回。