后台的每个执行环境都有一个表示变量的对象——变量对象。全局环境的变量对象始终存在，而像
compare()函数这样的局部环境的变量对象，则只在函数执行的过程中存在。在创建compare()函数
时，会创建一个预先包含全局变量对象的作用域链，这个作用域链被保存在内部的[[Scope]]属性中。
当调用compare()函数时，会为函数创建一个执行环境，然后通过复制函数的[[Scope]]属性中的对
象构建起执行环境的作用域链。此后，又有一个活动对象（在此作为变量对象使用）被创建并被推入执
行环境作用域链的前端。对于这个例子中compare()函数的执行环境而言，其作用域链中包含两个变
量对象：本地活动对象和全局变量对象。显然，作用域链本质上是一个指向变量对象的指针列表，它只
引用但不实际包含变量对象。
无论什么时候在函数中访问一个变量时，就会从作用域链中搜索具有相应名字的变量。一般来讲，
当函数执行完毕后，局部活动对象就会被销毁，内存中仅保存全局作用域（全局执行环境的变量对象）。
但是，闭包的情况又有所不同。